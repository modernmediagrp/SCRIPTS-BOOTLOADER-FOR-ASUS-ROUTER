#!/bin/sh
#
########## MAIN FUNCTION ##########
#
# 函数main用于读入动作命令和配置文件并执行操作
main()
{
    # 设置自定义局部变量ACTION为位置参数1的值
    local ACTION="${1}"
    #
    # 设置自定义局部变量CONFIGURATION为调用函数formatRuleConfig格式化位置参数2的值
    local CONFIGURATION="$(formatRuleConfig "${2}")"
    #
    # 调用函数isValidRuleSet检验自定义局部变量CONFIGURATION是否合法
    isValidRuleSet "${CONFIGURATION}"
    #
    # 如果函数isValidRuleSet的返回值为0
    if [ ${?} -eq 0 ]
    then
        #
        # 根据自定义局部变量ACTION的值进行后续操作
        case "${ACTION}" in
            #
            # 如果自定义局部变量ACTION的值为enable
            "enable")
                #
                # 调用函数isAliveRuleSet检验自定义局部变量CONFIGURATION定义的规则集是否已全部加载
                isAliveRuleSet "${CONFIGURATION}"
                #
                # 如果函数isAliveRuleSet的返回值为0
                if [ ${?} -eq 0 ]
                then
                    /opt/bin/echo -e "\nOK"
                    #
                    exit 0
                #
                # 如果函数isAliveRuleSet的返回值不为0
                else
                    #
                    # 调用函数disableRuleSet禁用自定义局部变量CONFIGURATION定义的规则集
                    disableRuleSet "${CONFIGURATION}"
                    #
                    # 等待10秒
                    /opt/bin/sleep 10
                    #
                    # 调用函数enableRuleSet加载自定义局部变量CONFIGURATION定义的规则集
                    enableRuleSet "${CONFIGURATION}"
                    /opt/bin/echo -e "DONE"
                    #
                    exit 0
                fi
                ;;
            #
            # 如果自定义局部变量ACTION的值为disable
            "disable")
                #
                # 调用函数disableRuleSet禁用自定义局部变量CONFIGURATION定义的规则集
                disableRuleSet "${CONFIGURATION}"
                /opt/bin/echo -e "DONE"
                #
                exit 0
                ;;
            #
            # 如果自定义局部变量ACTION的值为其它
            *)
                /opt/bin/echo -e "UNKNOWN OPERATION"
                #
                exit 1
                ;;
        esac
    #
    # 如果函数isValidRuleSet的返回值不为0
    else
        /opt/bin/echo -e "ERROR: COLLATE RULES IN FILE ${2}"
        #
        exit 1
    fi
}
#
########## END ##########
#
#
########## FUNCTIONS ABOUT CONFIGURATION ##########
#
# 函数formatRuleConfig用于格式化配置文件
formatRuleConfig()
{
    # 接收位置参数1，仅保留以NAME=或RULE=开头的行，按字母表排序并输出
    /opt/bin/cat "${1}" | /opt/bin/sed -E -e '/^[[:space:]]*$/d' -ne '/^(NAME=|RULE=).*/p' | /opt/bin/sort
}
#
########## END ##########
#
#
########## SET FUNCTIONS ##########
#
# 函数isValidRuleSet用于检验配置文件定义的规则集是否合法
isValidRuleSet()
{
    # 设置自定义局部变量USER_DEFINED_CHAIN_NAME为位置参数1中NAME的值
    local USER_DEFINED_CHAIN_NAME="FWD_$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/^NAME=\"(.*)\"/\1/p')"
    #
    # 设置自定义局部变量RULE_COUNT为位置参数1中RULE的行数
    local RULE_COUNT=$(/opt/bin/echo "${1}" | /opt/bin/grep -c '^RULE=')
    #
    # 设置自定义局部变量RULE_SET为位置参数1中RULE的值（允许多行）
    local RULE_SET="$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/^RULE=\"(.*)\"/\1/p')"
    #
    while [ ${RULE_COUNT} -gt 0 ]
    do
        #
        # 设置自定义局部变量RULE_ITEM为自定义局部变量RULE_SET的值中的第${RULE_COUNT}行
        local RULE_ITEM="$(/opt/bin/echo -e "${RULE_SET}" | /opt/bin/sed -E -n -e ''"${RULE_COUNT}"'p')"
        #
        # 调用函数isValidRuleTerm检验自定义局部变量RULE_ITEM是否合法
        isValidRuleTerm "${RULE_ITEM}"
        #
        # 如果函数isValidRuleTerm的返回值不为0
        if [ ${?} -ne 0 ]
        then
            return 1
        fi
        #
        RULE_COUNT=$((${RULE_COUNT}-1))
    done
}
#
# 函数isAliveRuleSet用于检验配置文件定义的规则集是否已全部加载
isAliveRuleSet()
{
    # 设置自定义局部变量USER_DEFINED_CHAIN_NAME为位置参数1中NAME的值
    local USER_DEFINED_CHAIN_NAME="FWD_$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/^NAME=\"(.*)\"/\1/p')"
    #
    # 设置自定义局部变量RULE_SET为位置参数1中RULE的值（允许多行）
    local RULE_SET="$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/^RULE=\"(.*)\"/\1/p')"
    #
    # 设置自定义局部变量ACTION_SET为自定义局部变量RULE_SET的值中的动作值（允许多行，去重）
    local ACTION_SET="$(/opt/bin/echo "${RULE_SET}" | /opt/bin/cut -d '#' -f 1 | /opt/bin/uniq)"
    #
    # 设置自定义局部变量ACTION_TERM为自定义局部变量ACTION_SET的值中的动作值
    local ACTION_TERM
    for ACTION_TERM in ${ACTION_SET} # ${ACTION_SET}绝不能被引号包围
    do
        #
        # 根据自定义局部变量ACTION_TERM的值进行后续操作
        case "${ACTION_TERM}" in
            #
            # 如果自定义局部变量ACTION_TERM的值为OPEN或CLOSE
            "OPEN" | "CLOSE")
                #
                # 设置自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN为Chain ${USER_DEFINED_CHAIN_NAME}是否存在的测试值
                local TEST_EXIST_USER_DEFINED_CHAIN="$(iptables -t filter -nvL | /opt/bin/grep 'Chain '"${USER_DEFINED_CHAIN_NAME}"'')"
                #
                # 如果自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN的值非空
                if [ -n "${TEST_EXIST_USER_DEFINED_CHAIN}" ]
                then
                    #
                    # 设置自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN为${USER_DEFINED_CHAIN_NAME}是否被filter表中INPUT链引用的测试值
                    local TEST_REFERENCE_USER_DEFINED_CHAIN="$(iptables -t filter -nvL INPUT | /opt/bin/grep ''"${USER_DEFINED_CHAIN_NAME}"'')"
                    #
                    # 如果自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN的值非空
                    if [ -n "${TEST_REFERENCE_USER_DEFINED_CHAIN}" ]
                    then
                        #
                        # 设置自定义局部变量RULE_SET为自定义局部变量RULE_SET的值中的${ACTION_TERM}动作值（允许多行）
                        local RULE_SET="$(/opt/bin/echo "${RULE_SET}" | /opt/bin/grep '^'"${ACTION_TERM}"'#')"
                        #
                        # 设置自定义局部变量RULE_COUNT为自定义局部变量RULE_SET的值的行数
                        local RULE_COUNT=$(/opt/bin/echo "${RULE_SET}" | /opt/bin/wc -l)
                        #
                        while [ ${RULE_COUNT} -gt 0 ]
                        do
                            #
                            # 设置自定义局部变量RULE_ITEM为自定义局部变量RULE_SET的值中的第${RULE_COUNT}行
                            local RULE_ITEM="$(/opt/bin/echo -e "${RULE_SET}" | /opt/bin/sed -E -n -e ''"${RULE_COUNT}"'p')"
                            #
                            # 调用函数isAliveRuleTerm检验自定义局部变量RULE_ITEM规则项是否已加载
                            isAliveRuleTerm "${USER_DEFINED_CHAIN_NAME}" "${RULE_ITEM}"
                            #
                            # 如果函数isAliveRuleTerm的返回值不为0
                            if [ ${?} -ne 0 ]
                            then
                                return 1
                            fi
                            #
                            RULE_COUNT=$((${RULE_COUNT}-1))
                        done
                    #
                    # 如果自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN的值为空
                    else
                        return 1
                    fi
                #
                # 如果自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN的值为空
                else
                    return 1
                fi
                ;;
            #
            # 如果自定义局部变量ACTION_TERM的值为FORWARD
            "FORWARD")
                #
                # 设置自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN为Chain ${USER_DEFINED_CHAIN_NAME}是否存在的测试值
                local TEST_EXIST_USER_DEFINED_CHAIN="$(iptables -t nat -nvL | /opt/bin/grep 'Chain '"${USER_DEFINED_CHAIN_NAME}"'')"
                #
                # 如果自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN的值非空
                if [ -n "${TEST_EXIST_USER_DEFINED_CHAIN}" ]
                then
                    #
                    # 设置自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN为${USER_DEFINED_CHAIN_NAME}是否被nat表中PREROUTING链引用的测试值
                    local TEST_REFERENCE_USER_DEFINED_CHAIN="$(iptables -t nat -nvL PREROUTING | /opt/bin/grep ''"${USER_DEFINED_CHAIN_NAME}"'')"
                    #
                    # 如果自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN的值非空
                    if [ -n "${TEST_REFERENCE_USER_DEFINED_CHAIN}" ]
                    then
                        #
                        # 设置自定义局部变量WAN0_GW_IFNAME为网关设备名
                        local WAN0_GW_IFNAME="$(nvram get wan0_gw_ifname)"
                        #
                        # 设置自定义局部变量WAN_IP_ADDRESS为网关IP地址
                        local WAN_IP_ADDRESS="$(ip address show dev "${WAN0_GW_IFNAME}" | /opt/bin/sed -E -n -e 's/^[[:space:]]*inet[[:space:]]*([[:digit:]]*\.[[:digit:]]*\.[[:digit:]]*\.[[:digit:]]*).*/\1/p')"
                        #
                        # 设置自定义局部变量DESTINATION_IP_ADDRESS为当前DNAT使用的报文目标IP地址
                        local DESTINATION_IP_ADDRESS="$(/opt/bin/echo "${TEST_REFERENCE_USER_DEFINED_CHAIN}" | /opt/bin/gawk '{print $9}')"
                        #
                        # 如果自定义局部变量DESTINATION_IP_ADDRESS的值等于自定义局部变量WAN_IP_ADDRESS的值
                        if [ "${DESTINATION_IP_ADDRESS}" == "${WAN_IP_ADDRESS}" ]
                        then
                            #
                            # 设置自定义局部变量RULE_SET为自定义局部变量RULE_SET的值中的${ACTION_TERM}动作值（允许多行）
                            local RULE_SET="$(/opt/bin/echo "${RULE_SET}" | /opt/bin/grep '^'"${ACTION_TERM}"'#')"
                            #
                            # 设置自定义局部变量RULE_COUNT为自定义局部变量RULE_SET的值的行数
                            local RULE_COUNT=$(/opt/bin/echo "${RULE_SET}" | /opt/bin/wc -l)
                            #
                            while [ ${RULE_COUNT} -gt 0 ]
                            do
                                #
                                # 设置自定义局部变量RULE_ITEM为自定义局部变量RULE_SET的值中的第${RULE_COUNT}行
                                local RULE_ITEM="$(/opt/bin/echo -e "${RULE_SET}" | /opt/bin/sed -E -n -e ''"${RULE_COUNT}"'p')"
                                #
                                # 调用函数isAliveRuleTerm检验自定义局部变量RULE_ITEM规则项是否已加载
                                isAliveRuleTerm "${USER_DEFINED_CHAIN_NAME}" "${RULE_ITEM}"
                                #
                                # 如果函数isAliveRuleTerm的返回值不为0
                                if [ ${?} -ne 0 ]
                                then
                                    return 1
                                fi
                                #
                                RULE_COUNT=$((${RULE_COUNT}-1))
                            done
                        #
                        # 如果自定义局部变量DESTINATION_IP_ADDRESS的值不等于自定义局部变量WAN_IP_ADDRESS的值
                        else
                            return 1
                        fi
                    #
                    # 如果自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN的值为空
                    else
                        return 1
                    fi
                #
                # 如果自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN的值为空
                else
                    return 1
                fi
                ;;
            #
            # 如果自定义局部变量ACTION_TERM的值为其它
            *)
                return 1
                ;;
        esac
    done
}
#
# 函数enableRuleSet用于加载配置文件定义的规则集
enableRuleSet()
{
    # 设置自定义局部变量USER_DEFINED_CHAIN_NAME为位置参数1中NAME的值
    local USER_DEFINED_CHAIN_NAME="FWD_$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/^NAME=\"(.*)\"/\1/p')"
    #
    # 设置自定义局部变量RULE_SET为位置参数1中RULE的值（允许多行）
    local RULE_SET="$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/^RULE=\"(.*)\"/\1/p')"
    #
    # 设置自定义局部变量ACTION_SET为自定义局部变量RULE_SET的值中的动作值（允许多行，去重）
    local ACTION_SET="$(/opt/bin/echo "${RULE_SET}" | /opt/bin/cut -d '#' -f 1 | /opt/bin/uniq)"
    #
    # 设置自定义局部变量ACTION_TERM为自定义局部变量ACTION_SET的值中的动作值
    local ACTION_TERM
    for ACTION_TERM in ${ACTION_SET} # ${ACTION_SET}绝不能被引号包围
    do
        #
        # 根据自定义局部变量ACTION_TERM的值进行后续操作
        case "${ACTION_TERM}" in
            #
            # 如果自定义局部变量ACTION_TERM的值为OPEN或CLOSE
            "OPEN" | "CLOSE")
                #
                # 设置自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN为Chain ${USER_DEFINED_CHAIN_NAME}是否存在的测试值
                local TEST_EXIST_USER_DEFINED_CHAIN="$(iptables -t filter -nvL | /opt/bin/grep 'Chain '"${USER_DEFINED_CHAIN_NAME}"'')"
                #
                # 如果自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN的值为空
                if [ -z "${TEST_EXIST_USER_DEFINED_CHAIN}" ]
                then
                    #
                    # 在filter表中新建自定义链${USER_DEFINED_CHAIN_NAME}
                    iptables -t filter -N "${USER_DEFINED_CHAIN_NAME}"
                fi
                #
                # 设置自定义局部变量RULE_SET为自定义局部变量RULE_SET的值中的${ACTION_TERM}动作值（允许多行）
                local RULE_SET="$(/opt/bin/echo "${RULE_SET}" | /opt/bin/grep '^'"${ACTION_TERM}"'#')"
                #
                # 设置自定义局部变量RULE_COUNT为自定义局部变量RULE_SET的值的行数
                local RULE_COUNT=$(/opt/bin/echo "${RULE_SET}" | /opt/bin/wc -l)
                #
                while [ ${RULE_COUNT} -gt 0 ]
                do
                    #
                    # 设置自定义局部变量RULE_ITEM为自定义局部变量RULE_SET的值中的第${RULE_COUNT}行
                    local RULE_ITEM="$(/opt/bin/echo -e "${RULE_SET}" | /opt/bin/sed -E -n -e ''"${RULE_COUNT}"'p')"
                    #
                    # 调用函数enableRuleTerm加载自定义局部变量RULE_ITEM规则项
                    enableRuleTerm "${USER_DEFINED_CHAIN_NAME}" "${RULE_ITEM}"
                    #
                    RULE_COUNT=$((${RULE_COUNT}-1))
                done
                #
                # 设置自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN为${USER_DEFINED_CHAIN_NAME}是否被filter表中INPUT链引用的测试值
                local TEST_REFERENCE_USER_DEFINED_CHAIN="$(iptables -t filter -nvL INPUT | /opt/bin/grep ''"${USER_DEFINED_CHAIN_NAME}"'')"
                #
                # 如果自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN的值为空
                if [ -z "${TEST_REFERENCE_USER_DEFINED_CHAIN}" ]
                then
                    #
                    # 在filter表中INPUT链插入规则，引用自定义链${USER_DEFINED_CHAIN_NAME}
                    iptables -t filter -I INPUT 1 -j "${USER_DEFINED_CHAIN_NAME}"
                fi
                ;;
            #
            # 如果自定义局部变量ACTION_TERM的值为FORWARD
            "FORWARD")
                #
                # 设置自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN为Chain ${USER_DEFINED_CHAIN_NAME}是否存在的测试值
                local TEST_EXIST_USER_DEFINED_CHAIN="$(iptables -t nat -nvL | /opt/bin/grep 'Chain '"${USER_DEFINED_CHAIN_NAME}"'')"
                #
                # 如果自定义局部变量TEST_EXIST_USER_DEFINED_CHAIN的值为空
                if [ -z "${TEST_EXIST_USER_DEFINED_CHAIN}" ]
                then
                    #
                    # 在nat表中新建自定义链${USER_DEFINED_CHAIN_NAME}
                    iptables -t nat -N "${USER_DEFINED_CHAIN_NAME}"
                fi
                #
                # 设置自定义局部变量RULE_SET为自定义局部变量RULE_SET的值中的${ACTION_TERM}动作值（允许多行）
                local RULE_SET="$(/opt/bin/echo "${RULE_SET}" | /opt/bin/grep '^'"${ACTION_TERM}"'#')"
                #
                # 设置自定义局部变量RULE_COUNT为自定义局部变量RULE_SET的值的行数
                local RULE_COUNT=$(/opt/bin/echo "${RULE_SET}" | /opt/bin/wc -l)
                #
                # 设置自定义局部变量WAN0_GW_IFNAME为网关设备名
                local WAN0_GW_IFNAME="$(nvram get wan0_gw_ifname)"
                #
                # 设置自定义局部变量WAN_IP_ADDRESS为网关IP地址
                local WAN_IP_ADDRESS="$(ip address show dev "${WAN0_GW_IFNAME}" | /opt/bin/sed -E -n -e 's/^[[:space:]]*inet[[:space:]]*([[:digit:]]*\.[[:digit:]]*\.[[:digit:]]*\.[[:digit:]]*).*/\1/p')"
                #
                while [ ${RULE_COUNT} -gt 0 ]
                do
                    #
                    # 设置自定义局部变量RULE_ITEM为自定义局部变量RULE_SET的值中的第${RULE_COUNT}行
                    local RULE_ITEM="$(/opt/bin/echo -e "${RULE_SET}" | /opt/bin/sed -E -n -e ''"${RULE_COUNT}"'p')"
                    #
                    # 调用函数enableRuleTerm加载自定义局部变量RULE_ITEM规则项
                    enableRuleTerm "${USER_DEFINED_CHAIN_NAME}" "${RULE_ITEM}"
                    #
                    RULE_COUNT=$((${RULE_COUNT}-1))
                done
                #
                # 设置自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN为${USER_DEFINED_CHAIN_NAME}是否被nat表中PREROUTING链引用的测试值
                local TEST_REFERENCE_USER_DEFINED_CHAIN="$(iptables -t nat -nvL PREROUTING | /opt/bin/grep ''"${USER_DEFINED_CHAIN_NAME}"'')"
                #
                # 如果自定义局部变量TEST_REFERENCE_USER_DEFINED_CHAIN的值为空
                if [ -z "${TEST_REFERENCE_USER_DEFINED_CHAIN}" ]
                then
                    #
                    # 在nat表中PREROUTING链插入规则，设置DNAT使用的报文目标IP地址为${WAN_IP_ADDRESS}，引用自定义链${USER_DEFINED_CHAIN_NAME}
                    iptables -t nat -I PREROUTING 1 -d "${WAN_IP_ADDRESS}" -j "${USER_DEFINED_CHAIN_NAME}"
                fi
                ;;
            #
            # 如果自定义局部变量ACTION_TERM的值为其它
            *)
                #
                # 以下语句不可能被执行，因为函数isValidRuleSet已将此种情况排除
                continue
                ;;
        esac
    done
}
#
# 函数disableRuleSet用于禁用配置文件定义的规则集
disableRuleSet()
{
    # 设置自定义局部变量USER_DEFINED_CHAIN_NAME为位置参数1中NAME的值
    local USER_DEFINED_CHAIN_NAME="FWD_$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/^NAME=\"(.*)\"/\1/p')"
    #
    # 设置自定义局部变量RULE_SET为位置参数1中RULE的值（允许多行）
    local RULE_SET="$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/^RULE=\"(.*)\"/\1/p')"
    #
    # 设置自定义局部变量ACTION_SET为自定义局部变量RULE_SET的值中的动作值（允许多行，去重）
    local ACTION_SET="$(/opt/bin/echo "${RULE_SET}" | /opt/bin/cut -d '#' -f 1 | /opt/bin/uniq)"
    #
    # 设置自定义局部变量ACTION_TERM为自定义局部变量ACTION_SET的值中的动作值
    local ACTION_TERM
    for ACTION_TERM in ${ACTION_SET} # ${ACTION_SET}绝不能被引号包围
    do
        #
        # 根据自定义局部变量ACTION_TERM的值进行后续操作
        case "${ACTION_TERM}" in
            #
            # 如果自定义局部变量ACTION_TERM的值为OPEN或CLOSE
            "OPEN" | "CLOSE")
                #
                # 在filter表中INPUT链删除规则，取消引用自定义链${USER_DEFINED_CHAIN_NAME}
                iptables -t filter -D INPUT -j "${USER_DEFINED_CHAIN_NAME}" 2> /dev/null
                #
                # 在filter表中清空自定义链${USER_DEFINED_CHAIN_NAME}
                iptables -t filter -F "${USER_DEFINED_CHAIN_NAME}" 2> /dev/null
                #
                # 在filter表中删除自定义链${USER_DEFINED_CHAIN_NAME}
                iptables -t filter -X "${USER_DEFINED_CHAIN_NAME}" 2> /dev/null
                continue
                ;;
            #
            # 如果自定义局部变量ACTION_TERM的值为FORWARD
            "FORWARD")
                #
                # 设置自定义局部变量DESTINATION_IP_ADDRESS为当前DNAT使用的报文目标IP地址
                local DESTINATION_IP_ADDRESS="$(iptables -t nat -nvL PREROUTING | /opt/bin/grep ''"${USER_DEFINED_CHAIN_NAME}"'' | /opt/bin/gawk '{print $9}')"
                #
                # 在nat表中PREROUTING链删除规则，取消设置DNAT使用的报文目标IP地址为${DESTINATION_IP_ADDRESS}，取消引用自定义链${USER_DEFINED_CHAIN_NAME}
                iptables -t nat -D PREROUTING -d "${DESTINATION_IP_ADDRESS}" -j "${USER_DEFINED_CHAIN_NAME}" 2> /dev/null
                #
                # 在filter表中清空自定义链${USER_DEFINED_CHAIN_NAME}
                iptables -t nat -F "${USER_DEFINED_CHAIN_NAME}" 2> /dev/null
                #
                # 在filter表中删除自定义链${USER_DEFINED_CHAIN_NAME}
                iptables -t nat -X "${USER_DEFINED_CHAIN_NAME}" 2> /dev/null
                continue
                ;;
            #
            # 如果自定义局部变量ACTION_TERM的值为其它
            *)
                #
                # 以下语句不可能被执行，因为函数isValidRuleSet已将此种情况排除
                continue
                ;;
        esac
    done
}
#
########## END ##########
#
#
########## TERM FUNCTIONS ##########
#
# 函数isValidRuleTerm用于检验规则集中规则项是否合法
isValidRuleTerm()
{
    # 设置自定义局部变量ACTION_TERM为位置参数1中的动作值
    local ACTION_TERM="$(/opt/bin/echo "${1}" | /opt/bin/cut -d '#' -f 1)"
    #
    # 根据自定义局部变量ACTION_TERM的值进行后续操作
    case "${ACTION_TERM}" in
        #
        # 如果自定义局部变量ACTION_TERM的值为OPEN或CLOSE
        "OPEN" | "CLOSE")
            #
            # 设置自定义局部变量NUM_COLUMN为位置参数1中的列数
            local NUM_COLUMN=$(/opt/bin/echo "${1}" | /opt/bin/sed -e 's/#/\n/g' | /opt/bin/wc -l)
            #
            # 如果自定义局部变量NUM_COLUMN的值为3
            if [ ${NUM_COLUMN} -eq 3 ]
            then
                #
                # 设置自定义局部变量PROTOCOL为位置参数1中的协议名
                local PROTOCOL="$(/opt/bin/echo "${1}" | /opt/bin/cut -d '#' -f 2 | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
                #
                # 设置自定义局部变量LOCAL_PORT为位置参数1中的路由器端口号
                local LOCAL_PORT="$(/opt/bin/echo "${1}" | /opt/bin/cut -d '#' -f 3)"
                #
                # 调用函数isValidProtocol检验自定义局部变量PROTOCOL是否合法，将结果存入自定义局部变量TEST_1
                local TEST_1=$(isValidProtocol "${PROTOCOL}")
                #
                # 调用函数isValidPort检验自定义局部变量LOCAL_PORT是否合法，将结果存入自定义局部变量TEST_2
                local TEST_2=$(isValidPort "${LOCAL_PORT}")
                #
                # 如果自定义局部变量TEST_1的值不为0或自定义局部变量TEST_2的值不为0
                if [ ${TEST_1} -ne 0 ] || [ ${TEST_2} -ne 0 ]
                then
                    return 1
                fi
            #
            # 如果自定义局部变量NUM_COLUMN的值不为3
            else
                return 1
            fi
            ;;
        #
        # 如果自定义局部变量ACTION_TERM的值为FORWARD
        "FORWARD")
            #
            # 设置自定义局部变量NUM_COLUMN为位置参数1中的列数
            local NUM_COLUMN=$(/opt/bin/echo "${1}" | /opt/bin/sed -e 's/#/\n/g' | /opt/bin/wc -l)
            #
            # 如果自定义局部变量NUM_COLUMN的值为5
            if [ ${NUM_COLUMN} -eq 5 ]
            then
                #
                # 设置自定义局部变量PROTOCOL为位置参数1中的协议名
                local PROTOCOL="$(/opt/bin/echo "${1}" | /opt/bin/cut -d '#' -f 2 | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
                #
                # 设置自定义局部变量LOCAL_PORT为位置参数1中的路由器端口号
                local LOCAL_PORT="$(/opt/bin/echo "${1}" | /opt/bin/cut -d '#' -f 3)"
                #
                # 设置自定义局部变量TARGET_IP_ADDRESS为位置参数1中的端口转发目标主机IP地址
                local TARGET_IP_ADDRESS="$(/opt/bin/echo "${1}" | /opt/bin/cut -d '#' -f 4)"
                #
                # 设置自定义局部变量TARGET_PORT为位置参数1中的端口转发目标主机端口号
                local TARGET_PORT="$(/opt/bin/echo "${1}" | /opt/bin/cut -d '#' -f 5)"
                #
                # 调用函数isValidProtocol检验自定义局部变量PROTOCOL是否合法，将结果存入自定义局部变量TEST_1
                local TEST_1=$(isValidProtocol "${PROTOCOL}")
                #
                # 调用函数isValidPort检验自定义局部变量LOCAL_PORT是否合法，将结果存入自定义局部变量TEST_2
                local TEST_2=$(isValidPort "${LOCAL_PORT}")
                #
                # 调用函数isValidIP检验自定义局部变量TARGET_IP_ADDRESS是否合法，将结果存入自定义局部变量TEST_3
                local TEST_3=$(isValidIP "${TARGET_IP_ADDRESS}")
                #
                # 调用函数isValidPort检验自定义局部变量TARGET_PORT是否合法，将结果存入自定义局部变量TEST_4
                local TEST_4=$(isValidPort "${TARGET_PORT}")
                #
                # 如果自定义局部变量TEST_1的值不为0或自定义局部变量TEST_2的值不为0或自定义局部变量TEST_3的值不为0或自定义局部变量TEST_4的值不为0
                if [ ${TEST_1} -ne 0 ] || [ ${TEST_2} -ne 0 ] || [ ${TEST_3} -ne 0 ] || [ ${TEST_4} -ne 0 ]
                then
                    return 1
                fi
            #
            # 如果自定义局部变量NUM_COLUMN的值不为5
            else
                return 1
            fi
            ;;
        #
        # 如果自定义局部变量ACTION_TERM的值为其它
        *)
            return 1
            ;;
    esac
}
#
# 函数isAliveRuleTerm用于检验规则集中规则项是否已加载
isAliveRuleTerm()
{
    # 设置自定义局部变量USER_DEFINED_CHAIN_NAME为位置参数1的值
    local USER_DEFINED_CHAIN_NAME="${1}"
    #
    # 设置自定义局部变量ACTION_TERM为位置参数2中的动作值
    local ACTION_TERM="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 1)"
    #
    # 根据自定义局部变量ACTION_TERM的值进行后续操作
    case "${ACTION_TERM}" in
        #
        # 如果自定义局部变量ACTION_TERM的值为OPEN或CLOSE
        "OPEN" | "CLOSE")
            #
            # 设置自定义局部变量PROTOCOL为位置参数2中的协议名
            local PROTOCOL="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 2 | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
            #
            # 设置自定义局部变量LOCAL_PORT为位置参数2中的路由器端口号
            local LOCAL_PORT="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 3)"
            #
            # 设置自定义局部变量TEST_EXIST_RULE为此规则是否被filter表中${USER_DEFINED_CHAIN_NAME}链引用的测试值
            local TEST_EXIST_RULE="$(iptables -t filter -nvL "${USER_DEFINED_CHAIN_NAME}" | /opt/bin/gawk '{print $4"#"$11}' | /opt/bin/grep '^'"${PROTOCOL}"'#.*:'"${LOCAL_PORT}"'')"
            #
            # 如果自定义局部变量TEST_EXIST_RULE的值非空
            if [ -n "${TEST_EXIST_RULE}" ]
            then
                /opt/bin/echo -e "${ACTION_TERM}\tROUTER:${LOCAL_PORT}/${PROTOCOL}"
                return 0
            #
            # 如果自定义局部变量TEST_EXIST_RULE的值为空
            else
                return 1
            fi
            ;;
        #
        # 如果自定义局部变量ACTION_TERM的值为FORWARD
        "FORWARD")
            #
            # 设置自定义局部变量PROTOCOL为位置参数2中的协议名
            local PROTOCOL="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 2 | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
            #
            # 设置自定义局部变量LOCAL_PORT为位置参数2中的路由器端口号
            local LOCAL_PORT="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 3)"
            #
            # 设置自定义局部变量TARGET_IP_ADDRESS为位置参数2中的端口转发目标主机IP地址
            local TARGET_IP_ADDRESS="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 4)"
            #
            # 设置自定义局部变量TARGET_PORT为位置参数2中的端口转发目标主机端口号
            local TARGET_PORT="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 5)"
            #
            # 设置自定义局部变量TEST_EXIST_RULE为此规则是否被nat表中${USER_DEFINED_CHAIN_NAME}链引用的测试值
            local TEST_EXIST_RULE="$(iptables -t nat -nvL "${USER_DEFINED_CHAIN_NAME}" | /opt/bin/gawk '{print $4"#"$11}' | /opt/bin/grep '^'"${PROTOCOL}"'#.*:'"${LOCAL_PORT}"'')"
            #
            # 如果自定义局部变量TEST_EXIST_RULE的值非空
            if [ -n "${TEST_EXIST_RULE}" ]
            then
                /opt/bin/echo -e "ROUTER:${LOCAL_PORT}/${PROTOCOL}\tTO\t${TARGET_IP_ADDRESS}:${TARGET_PORT}/${PROTOCOL}"
                return 0
            #
            # 如果自定义局部变量TEST_EXIST_RULE的值为空
            else
                return 1
            fi
            ;;
        #
        # 如果自定义局部变量ACTION_TERM的值为其它
        *)
            return 1
            ;;
    esac
}
#
# 函数enableRuleTerm用于加载规则集中规则项
enableRuleTerm()
{
    # 设置自定义局部变量USER_DEFINED_CHAIN_NAME为位置参数1的值
    local USER_DEFINED_CHAIN_NAME="${1}"
    #
    # 设置自定义局部变量ACTION_TERM为位置参数2中的动作值
    local ACTION_TERM="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 1)"
    #
    # 根据自定义局部变量ACTION_TERM的值进行后续操作
    case "${ACTION_TERM}" in
        #
        # 如果自定义局部变量ACTION_TERM的值为OPEN
        "OPEN")
            #
            # 设置自定义局部变量PROTOCOL为位置参数2中的协议名
            local PROTOCOL="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 2 | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
            #
            # 设置自定义局部变量LOCAL_PORT为位置参数2中的路由器端口号
            local LOCAL_PORT="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 3)"
            # 在filter表中${USER_DEFINED_CHAIN_NAME}链插入规则，接收发往${LOCAL_PORT}/${PROTOCOL}的报文
            iptables -t filter -I "${USER_DEFINED_CHAIN_NAME}" 1 -p "${PROTOCOL}" --dport "${LOCAL_PORT}" -j ACCEPT
            ;;
        #
        # 如果自定义局部变量ACTION_TERM的值为CLOSE
        "CLOSE")
            #
            # 设置自定义局部变量PROTOCOL为位置参数2中的协议名
            local PROTOCOL="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 2 | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
            #
            # 设置自定义局部变量LOCAL_PORT为位置参数2中的路由器端口号
            local LOCAL_PORT="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 3)"
            # 在filter表中${USER_DEFINED_CHAIN_NAME}链插入规则，丢弃发往${LOCAL_PORT}/${PROTOCOL}的报文
            iptables -t filter -I "${USER_DEFINED_CHAIN_NAME}" 1 -p "${PROTOCOL}" --dport "${LOCAL_PORT}" -j DROP
            ;;
        #
        # 如果自定义局部变量ACTION_TERM的值为FORWARD
        "FORWARD")
            #
            # 设置自定义局部变量PROTOCOL为位置参数2中的协议名
            local PROTOCOL="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 2 | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
            #
            # 设置自定义局部变量LOCAL_PORT为位置参数2中的路由器端口号
            local LOCAL_PORT="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 3)"
            #
            # 设置自定义局部变量TARGET_IP_ADDRESS为位置参数2中的端口转发目标主机IP地址
            local TARGET_IP_ADDRESS="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 4)"
            #
            # 设置自定义局部变量TARGET_PORT为位置参数2中的端口转发目标主机端口号
            local TARGET_PORT="$(/opt/bin/echo "${2}" | /opt/bin/cut -d '#' -f 5)"
            #
            # 在nat表中${USER_DEFINED_CHAIN_NAME}链插入规则，将发往${LOCAL_PORT}/${PROTOCOL}的报文转发至${TARGET_IP_ADDRESS}:${TARGET_PORT}/${PROTOCOL}
            iptables -t nat -I "${USER_DEFINED_CHAIN_NAME}" 1 -p "${PROTOCOL}" --dport "${LOCAL_PORT}" -j DNAT --to-destination "${TARGET_IP_ADDRESS}":"${TARGET_PORT}"
            ;;
        #
        # 如果自定义局部变量ACTION_TERM的值为其它
        *)
            return 1
            ;;
    esac
}
#
########## END ##########
#
#
########## MISCELLANEOUS FUNCTIONS ##########
#
# 函数isValidProtocol用于检验协议名是否合法
isValidProtocol()
{
    # 根据位置参数1的值进行后续操作
    case "$(/opt/bin/echo "${1}" | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')" in
        #
        # 如果位置参数1的值为TCP或tcp或UDP或udp
        "tcp" | "udp")
            /opt/bin/echo 0
            ;;
        #
        # 如果位置参数1的值为其它
        *)
            /opt/bin/echo 1
            ;;
    esac
}
#
# 函数isValidPort用于检验端口号是否合法
isValidPort()
{
    # 如果位置参数1的值大于等于0且小于等于65535
    if [ ${1} -ge 0 ] && [ ${1} -le 65535 ]
    then
        /opt/bin/echo 0
    else
        /opt/bin/echo 1
    fi
}
#
# 函数isValidIP用于检验IP是否合法
isValidIP()
{
    if [ "$(/opt/bin/echo "${1}" | /opt/bin/sed -E -e 's/^[[:digit:]]*\.[[:digit:]]*.[[:digit:]]*.[[:digit:]]*/0.0.0.0/')" != "0.0.0.0" ]
    then
        /opt/bin/echo 1
        return 1
    fi
    #
    local IP_ADDRESS_PART_1
    local IP_ADDRESS_PART_2
    local IP_ADDRESS_PART_3
    local IP_ADDRESS_PART_4
    #
    IP_ADDRESS_PART_1=$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/([[:digit:]]+)\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+/\1/p')
    IP_ADDRESS_PART_2=$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/[[:digit:]]+\.([[:digit:]]+)\.[[:digit:]]+\.[[:digit:]]+/\1/p')
    IP_ADDRESS_PART_3=$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/[[:digit:]]+\.[[:digit:]]+\.([[:digit:]]+)\.[[:digit:]]+/\1/p')
    IP_ADDRESS_PART_4=$(/opt/bin/echo "${1}" | /opt/bin/sed -E -n -e 's/[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.([[:digit:]]+)/\1/p')
    #
    if [ ${IP_ADDRESS_PART_1} -ge 0 ] && [ ${IP_ADDRESS_PART_1} -le 255 ] && \
    [ ${IP_ADDRESS_PART_2} -ge 0 ] && [ ${IP_ADDRESS_PART_2} -le 255 ] && \
    [ ${IP_ADDRESS_PART_3} -ge 0 ] && [ ${IP_ADDRESS_PART_3} -le 255 ] && \
    [ ${IP_ADDRESS_PART_4} -ge 0 ] && [ ${IP_ADDRESS_PART_4} -le 255 ]
    then
        /opt/bin/echo 0
    else
        /opt/bin/echo 1
    fi
}
#
########## END ##########
#
#
########## PORTAL ##########
#
# 程序入口
if [ ${#} -ne 2 ]
then
    /opt/bin/echo -e "Usage: $(basename "${0}") (enable|disable) RULE"
    #
    exit 1
    #
else
    # 设置自定义局部变量ACTION为位置参数1的小写值
    ACTION="$(/opt/bin/echo "${1}" | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
    #
    # 根据自定义局部变量ACTION的值进行后续操作
    case "${ACTION}" in
        #
        # 如果自定义局部变量ACTION的值为enable或disable
        "enable" | "disable")
            #
            # 调用函数main
            RULE_REAL_PATH="$(/opt/bin/realpath "${2}")"
            #
            if [ -e "${RULE_REAL_PATH}" ]
            then
                main "${ACTION}" "${RULE_REAL_PATH}"
            else
                /opt/bin/echo -e "UNABLE TO LOCATE ${RULE_REAL_PATH}"
                #
                exit 1
            fi
            ;;
        #
        # 如果自定义局部变量ACTION的值为其它
        *)
            /opt/bin/echo -e "Usage: $(basename "${0}") (enable|disable) RULE"
            #
            exit 1
            ;;
    esac
fi
#
########## END ##########