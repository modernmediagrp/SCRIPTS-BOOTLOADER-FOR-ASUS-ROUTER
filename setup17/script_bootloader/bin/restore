#!/bin/sh
#
# 此程序用于恢复“华硕路由器开机自动运行程序系统”
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL="$(nvram get model)"
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="RESTORE"
#
echo -e "($(basename $0)): $$ *--------- ${SERVICE_FUNCTION} ${SERVICE_NAME} ON ${ROUTER_MODEL} ---------*"
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT_COUNT=$(find / -name 'script_bootloader' | wc -l)
#
case ${USB_MOUNT_POINT_COUNT} in
    0)
        echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: UNABLE TO LOCATE DIRECTORY script_bootloader"
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 1
        ;;
    1)
        USB_MOUNT_POINT="$(find / -name 'script_bootloader' | sed 's#/script_bootloader##')"
        ;;
    *)
        echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: NUMBER OF DIRECTORY script_bootloader MUST BE ONE"
        echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 2
        ;;
esac
#
# USB_MOUNT_SCRIPT: The script runs automatically when the USB flash drive is mounted
# 设置自定义变量USB_MOUNT_SCRIPT为U盘挂载时自动运行文件
USB_MOUNT_SCRIPT="${USB_MOUNT_POINT}/script_bootloader/bin/script_bootloader_usb_mount"
#
# USB_UMOUNT_SCRIPT: The script runs automatically when the USB flash drive is unmounted
# 设置自定义变量USB_UMOUNT_SCRIPT为U盘卸载时自动运行文件
USB_UMOUNT_SCRIPT="${USB_MOUNT_POINT}/script_bootloader/bin/script_bootloader_usb_umount"
#
# ADMINUSER: The administrator of the router
# 设置环境变量ADMINUSER为路由器管理页面的登陆帐号
ADMINUSER="$(sed -E -n -e 's#^ADMINUSER=\"(.*)\"#\1#p' "${USB_MOUNT_POINT}/script_bootloader/etc/sbl_credentials")"
#
# ADMINPASSWORD: The administrator's password of the router
# 设置环境变量ADMINPASSWORD为路由器管理页面的登陆密码
ADMINPASSWORD="$(sed -E -n -e 's#^ADMINPASSWORD=\"(.*)\"#\1#p' "${USB_MOUNT_POINT}/script_bootloader/etc/sbl_credentials")"
#
########## END ##########
#
#
########## ROUTER CONFIGURATION ##########
#
# Check if ${USB_MOUNT_SCRIPT} and ${USB_UMOUNT_SCRIPT} exist
# 检查文件${USB_MOUNT_SCRIPT}和${USB_UMOUNT_SCRIPT}是否存在
if [ -e "${USB_MOUNT_SCRIPT}" ] && [ -e "${USB_UMOUNT_SCRIPT}" ]
then
    echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: ALL THE PREREQUISITES ARE MET"
    #
    # Set nvram variable "script_usbmount" and "script_usbumount"
    # 如果两个文件都存在，则设置nvram变量script_usbmount和script_usbumount
    #
    # 使用nvram对变量script_usbmount进行设置。当U盘被挂载后，任何被该变量引用的可执行程序会自动执行
    nvram set script_usbmount="${USB_MOUNT_SCRIPT}"
    #
    # 使用nvram对变量script_usbumount进行设置。当U盘被卸载前，任何被该变量引用的可执行程序会自动执行
    nvram set script_usbumount="${USB_UMOUNT_SCRIPT}"
    #
    # 使用nvram对变量usb_ext_opt进行设置
    case "$(mount | sed -E -n -e 's#.*[[:space:]]+'"${USB_MOUNT_POINT}"'[[:space:]]+type[[:space:]]+(ext[[:digit:]])[[:space:]]+.*#\1#p')" in
        "ext3")
            nvram set usb_ext_opt="barrier=1,data=ordered"
            ;;
        "ext4")
            nvram set usb_ext_opt="barrier=1,data=journal"
            ;;
    esac
    #
    # 使用nvram对变量sbl_username进行设置
    nvram set sbl_username="${ADMINUSER}"
    #
    # 使用nvram对变量sbl_password进行设置
    nvram set sbl_password="${ADMINPASSWORD}"
    #
    # Commit the changes
    # 使用nvram命令对路由器进行设置后，必须执行nvram commit命令，才能将已作出的修改保存至路由器
    nvram commit
    #
    # Disable amtm
    # 禁用amtm
    if [ -n "$(which amtm)" ]
    then
        echo -e "alias amtm='echo -e \"\033[1;41;37mFAILURE\033[0m: COLLISION DETECTED\"'" >> "${USB_MOUNT_POINT}/etc/bashrc"
        rm -rf "/jffs/addons/amtm"
        touch "/jffs/addons/amtm"
        chmod 000 "/jffs/addons/amtm"
    fi
    #
    sync
    sleep 10
    umount -f "${USB_MOUNT_POINT}" > /dev/null 2>&1
    echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
    sync
    sleep 10
    #
    reboot
    #
else
    # Stop and Exit
    # 如果两个文件不同时存在，则该程序终止
    echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: NOT ALL THE PREREQUISITES ARE MET"
    echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
    #
    exit 3
fi
#
########## END ##########